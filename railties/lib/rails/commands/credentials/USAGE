=== Storing Encrypted Credentials in Source Control

The Rails `credentials` commands helps encrypting credentials to slim a production
environment's `ENV` hash. It's also useful for atomic deploys: no need to
coordinate key changes to get everything working as the keys are shipped
with the code.

=== Setup

Run `bin/rails credentials:setup` to opt in and generate the `config/credentials.yml.key`
and `config/credentials.yml.enc` files.

The latter contains all the keys to be encrypted while the former holds the
encryption key.

Don't lose the key! Put it in a password manager your team can access.
Should you lose it no one, including you, will be able to access any encrypted
credentials.
Don't commit the key! Add `config/credentials.yml.key` to your source control's
ignore file. If you use Git, Rails handles this for you.

Rails also looks for the key in `ENV["RAILS_CREDENTIALS_KEY"]` if that's easier to
manage.

You could prepend that to your server's start command like this:

   RAILS_CREDENTIALS_KEY="im-the-master-now-hahaha" server.start


The `config/credentials.yml.enc` has much the same format as `config/credentials.yml`:

   secret_key_base: so-secret-very-hidden-wow
   amazon:
     access_key_id: 123
     secret_access_key: 456

=== Editing Credentials

After `bin/rails credentials:setup`, run `bin/rails credentials:edit`.

That command opens a temporary file in `$EDITOR` with the decrypted contents of
`config/credentials.yml.enc` to edit the encrypted credentials.

When the temporary file is next saved the contents are encrypted and written to
`config/credentials.yml.enc` while the file itself is destroyed to prevent credentials
from leaking.
